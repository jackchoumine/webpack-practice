const t = {
  _pluginCompat: {
    _args: ['options'],
    taps: [
      { type: 'sync', name: 'Compiler' },
      { type: 'sync', name: 'Tapable camelCase', stage: 100 },
      { type: 'sync', name: 'Tapable this.hooks', stage: 200 },
    ],
    interceptors: [],
  },
  hooks: {
    shouldEmit: { _args: ['compilation'], taps: [], interceptors: [] },
    done: {
      _args: ['stats'],
      taps: [{ type: 'sync', name: 'clean-webpack-plugin' }],
      interceptors: [],
    },
    additionalPass: { _args: [], taps: [], interceptors: [] },
    beforeRun: {
      _args: ['compilation'],
      taps: [{ type: 'sync', name: 'NodeEnvironmentPlugin' }],
      interceptors: [],
    },
    run: { _args: ['compilation'], taps: [], interceptors: [] },
    emit: {
      _args: ['compilation'],
      taps: [
        { type: 'async', name: 'HtmlWebpackPlugin' },
        { type: 'sync', name: 'clean-webpack-plugin' },
      ],
      interceptors: [],
    },
    afterEmit: { _args: ['compilation'], taps: [], interceptors: [] },
    thisCompilation: {
      _args: ['compilation', 'params'],
      taps: [{ type: 'sync', name: 'mini-css-extract-plugin' }],
      interceptors: [],
    },
    compilation: {
      _args: ['compilation', 'params'],
      taps: [{ type: 'sync', name: 'HtmlWebpackPluginHooks' }],
      interceptors: [],
    },
    normalModuleFactory: { _args: ['normalModuleFactory'], taps: [], interceptors: [] },
    contextModuleFactory: { _args: ['contextModulefactory'], taps: [], interceptors: [] },
    beforeCompile: { _args: ['params'], taps: [], interceptors: [] },
    compile: { _args: ['params'], taps: [], interceptors: [] },
    make: {
      _args: ['compilation'],
      taps: [{ type: 'async', name: 'HtmlWebpackPlugin' }],
      interceptors: [],
    },
    afterCompile: { _args: ['compilation'], taps: [], interceptors: [] },
    watchRun: { _args: ['compiler'], taps: [], interceptors: [] },
    failed: { _args: ['error'], taps: [], interceptors: [] },
    invalid: { _args: ['filename', 'changeTime'], taps: [], interceptors: [] },
    watchClose: { _args: [], taps: [], interceptors: [] },
    environment: { _args: [], taps: [], interceptors: [] },
    afterEnvironment: { _args: [], taps: [], interceptors: [] },
    afterPlugins: { _args: ['compiler'], taps: [], interceptors: [] },
    afterResolvers: { _args: ['compiler'], taps: [], interceptors: [] },
    entryOption: { _args: ['context', 'entry'], taps: [], interceptors: [] },
  },
  outputPath: '',
  outputFileSystem: {},
  inputFileSystem: {
    fileSystem: {},
    _statStorage: {
      duration: 60000,
      running: {},
      data: {},
      levels: [],
      count: 0,
      interval: null,
      needTickCheck: false,
      nextTick: null,
      passive: true,
    },
    _readdirStorage: {
      duration: 60000,
      running: {},
      data: {},
      levels: [],
      count: 0,
      interval: null,
      needTickCheck: false,
      nextTick: null,
      passive: true,
    },
    _readFileStorage: {
      duration: 60000,
      running: {},
      data: {},
      levels: [],
      count: 0,
      interval: null,
      needTickCheck: false,
      nextTick: null,
      passive: true,
    },
    _readlinkStorage: {
      duration: 60000,
      running: {},
      data: {},
      levels: [],
      count: 0,
      interval: null,
      needTickCheck: false,
      nextTick: null,
      passive: true,
    },
  },
  recordsInputPath: null,
  recordsOutputPath: null,
  records: {},
  fileTimestamps: {},
  contextTimestamps: {},
  resolverFactory: {
    _pluginCompat: {
      _args: ['options'],
      taps: [
        { type: 'sync', name: 'ResolverFactory' },
        { type: 'sync', name: 'Tapable camelCase', stage: 100 },
        { type: 'sync', name: 'Tapable this.hooks', stage: 200 },
      ],
      interceptors: [],
    },
    hooks: {
      resolveOptions: { _map: {}, _interceptors: [] },
      resolver: { _map: {}, _interceptors: [] },
    },
    cache1: {},
    cache2: {},
  },
  resolvers: { normal: {}, loader: {}, context: {} },
  options: {
    entry: './src/empty.js',
    module: {
      rules: [
        {
          test: {},
          use: [
            '/Users/jack/front/webpack-practice/node_modules/mini-css-extract-plugin/dist/loader.js',
            'css-loader',
          ],
        },
        { test: {}, loader: 'html-loader' },
        { test: {}, use: './loaders/txt-loader' },
      ],
      unknownContextRequest: '.',
      unknownContextRegExp: false,
      unknownContextRecursive: true,
      unknownContextCritical: true,
      exprContextRequest: '.',
      exprContextRegExp: false,
      exprContextRecursive: true,
      exprContextCritical: true,
      wrappedContextRegExp: {},
      wrappedContextRecursive: true,
      wrappedContextCritical: false,
      strictExportPresence: false,
      strictThisContextOnImports: false,
      unsafeCache: false,
      defaultRules: [
        { type: 'javascript/auto', resolve: {} },
        { test: {}, type: 'javascript/esm', resolve: { mainFields: ['browser', 'main'] } },
        { test: {}, type: 'json' },
        { test: {}, type: 'webassembly/experimental' },
      ],
    },
    plugins: [
      {
        options: {
          template:
            '/Users/jack/front/webpack-practice/node_modules/html-webpack-plugin/lib/loader.js!/Users/jack/front/webpack-practice/test.html',
          filename: 'index.html',
          hash: false,
          inject: true,
          compile: true,
          favicon: false,
          minify: false,
          cache: true,
          showErrors: true,
          chunks: 'all',
          excludeChunks: [],
          chunksSortMode: 'auto',
          meta: {},
          title: 'Webpack App',
          xhtml: false,
        },
      },
      { options: { filename: '[name].css', chunkFilename: '[name].css' } },
      {
        dangerouslyAllowCleanPatternsOutsideProject: false,
        dry: false,
        verbose: false,
        cleanStaleWebpackAssets: true,
        protectWebpackAssets: true,
        cleanAfterEveryBuildPatterns: [],
        cleanOnceBeforeBuildPatterns: ['**/*'],
        currentAssets: [],
        initialClean: false,
        outputPath: '/Users/jack/front/webpack-practice/dist',
      },
      {},
    ],
    mode: 'production',
    context: '/Users/jack/front/webpack-practice',
    devtool: false,
    cache: false,
    target: 'web',
    output: {
      filename: '[name].js',
      chunkFilename: '[name].js',
      webassemblyModuleFilename: '[modulehash].module.wasm',
      library: '',
      hotUpdateFunction: 'webpackHotUpdate',
      jsonpFunction: 'webpackJsonp',
      chunkCallbackName: 'webpackChunk',
      globalObject: 'window',
      devtoolNamespace: '',
      libraryTarget: 'var',
      path: '/Users/jack/front/webpack-practice/dist',
      pathinfo: false,
      sourceMapFilename: '[file].map[query]',
      hotUpdateChunkFilename: '[id].[hash].hot-update.js',
      hotUpdateMainFilename: '[hash].hot-update.json',
      crossOriginLoading: false,
      jsonpScriptType: false,
      chunkLoadTimeout: 120000,
      hashFunction: 'md4',
      hashDigest: 'hex',
      hashDigestLength: 20,
      devtoolLineToLine: false,
      strictModuleExceptionHandling: false,
    },
    node: {
      console: false,
      process: true,
      global: true,
      Buffer: true,
      setImmediate: true,
      __filename: 'mock',
      __dirname: 'mock',
    },
    performance: { maxAssetSize: 250000, maxEntrypointSize: 250000, hints: 'warning' },
    optimization: {
      removeAvailableModules: true,
      removeEmptyChunks: true,
      mergeDuplicateChunks: true,
      flagIncludedChunks: true,
      occurrenceOrder: true,
      sideEffects: true,
      providedExports: true,
      usedExports: true,
      concatenateModules: true,
      splitChunks: {
        chunks: 'async',
        minSize: 30000,
        minChunks: 1,
        maxAsyncRequests: 5,
        automaticNameDelimiter: '~',
        maxInitialRequests: 3,
        name: true,
        cacheGroups: {
          default: { reuseExistingChunk: true, minChunks: 2, priority: -20 },
          vendors: { test: {}, priority: -10 },
        },
      },
      noEmitOnErrors: true,
      namedModules: false,
      namedChunks: false,
      portableRecords: false,
      minimize: true,
      minimizer: [{}],
      nodeEnv: 'production',
    },
    resolve: {
      unsafeCache: true,
      modules: ['node_modules'],
      extensions: ['.wasm', '.mjs', '.js', '.json'],
      mainFiles: ['index'],
      aliasFields: ['browser'],
      mainFields: ['browser', 'module', 'main'],
      cacheWithContext: false,
    },
    resolveLoader: {
      unsafeCache: true,
      mainFields: ['loader', 'main'],
      extensions: ['.js', '.json'],
      mainFiles: ['index'],
      cacheWithContext: false,
    },
  },
  context: '/Users/jack/front/webpack-practice',
  requestShortener: {
    currentDirectoryRegExp: {},
    parentDirectoryRegExp: {},
    buildinsAsModule: true,
    buildinsRegExp: {},
    cache: {},
  },
  running: false,
  watchFileSystem: {
    inputFileSystem: {
      fileSystem: {},
      _statStorage: {
        duration: 60000,
        running: {},
        data: {},
        levels: [],
        count: 0,
        interval: null,
        needTickCheck: false,
        nextTick: null,
        passive: true,
      },
      _readdirStorage: {
        duration: 60000,
        running: {},
        data: {},
        levels: [{}],
        count: 0,
        interval: null,
        needTickCheck: false,
        nextTick: null,
        passive: true,
      },
      _readFileStorage: {
        duration: 60000,
        running: {},
        data: {},
        levels: [],
        count: 0,
        interval: null,
        needTickCheck: false,
        nextTick: null,
        passive: true,
      },
      _readJsonStorage: {
        duration: 60000,
        running: {},
        data: {},
        count: 0,
        interval: null,
        needTickCheck: false,
        nextTick: null,
        passive: true,
      },
      _readlinkStorage: {
        duration: 60000,
        running: {},
        data: {},
        levels: [{}],
        count: 0,
        interval: null,
        needTickCheck: false,
        nextTick: null,
        passive: true,
      },
    },
    watcherOptions: { aggregateTimeout: 200 },
    watcher: {
      _events: {},
      _eventsCount: 0,
      options: { aggregateTimeout: 200 },
      watcherOptions: {},
      fileWatchers: [],
      dirWatchers: [],
      mtimes: {},
      paused: false,
      aggregatedChanges: [],
      aggregatedRemovals: [],
      aggregateTimeout: 0,
    },
  },
}
